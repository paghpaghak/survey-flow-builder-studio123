import { QuestionOptionsEditorProps } from '@/types/question.types';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Plus, Trash } from 'lucide-react';
import { createNewOption } from '@/utils/questionUtils';
import { PLACEHOLDERS } from '@/constants/question.constants';

/**
 * <summary>
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ Radio, Checkbox, Select.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
 * </summary>
 */
export function QuestionOptionsEditor({ 
  options, 
  onChange, 
  readOnly = false,
  errors = {}
}: QuestionOptionsEditorProps) {
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  const updateOption = (optionId: string, text: string) => {
    const updatedOptions = options.map(opt => 
      opt.id === optionId ? { ...opt, text } : opt
    );
    onChange(updatedOptions);
  };

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
   */
  const addOption = (afterIndex: number) => {
    const newOption = createNewOption();
    const newOptions = [
      ...options.slice(0, afterIndex + 1),
      newOption,
      ...options.slice(afterIndex + 1)
    ];
    onChange(newOptions);
  };

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ ID (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
   */
  const removeOption = (optionId: string) => {
    if (options.length > 1) {
      const filteredOptions = options.filter(opt => opt.id !== optionId);
      onChange(filteredOptions);
    }
  };

  return (
    <div className="space-y-2">
      <Label>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</Label>
      
      <div className="space-y-2 max-h-60 overflow-y-auto rounded border bg-muted px-2 py-2">
        {options.map((option, idx) => (
          <div key={option.id} className="flex items-center gap-2">
            <Input
              value={option.text}
              onChange={(e) => updateOption(option.id, e.target.value)}
              className={`flex-1 ${errors.options ? 'border-red-500' : ''}`}
              disabled={readOnly}
              placeholder={PLACEHOLDERS.OPTION_TEXT}
            />
            
            {!readOnly && (
              <>
                {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ */}
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => addOption(idx)}
                  title="–î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ"
                  className="text-green-600 hover:text-green-700"
                >
                  <Plus className="h-4 w-4" />
                </Button>
                
                {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ */}
                <button
                  onClick={() => removeOption(option.id)}
                  title="–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç"
                  disabled={options.length === 1}
                  className="text-red-600 hover:text-red-700 disabled:text-gray-400 p-1 transition-colors"
                >
                  <Trash className="h-4 w-4" />
                </button>
              </>
            )}
          </div>
        ))}
      </div>
      
      {errors.options && (
        <p className="text-sm text-red-500 mt-1">{errors.options}</p>
      )}
      
      {!readOnly && (
        <div className="text-sm text-gray-500 mt-2">
          üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "+" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–∂–¥—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
        </div>
      )}
    </div>
  );
}